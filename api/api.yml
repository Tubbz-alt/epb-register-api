openapi: 3.0.0

info:
  title: Energy Performance of Buildings Register API
  description: Public API for EPBR integrations
  version: 1.0.0-rc4

servers:
  - url: 'https://api.epb-integration.digital.communities.gov.uk/'
    description: Integration Service
  - url: 'https://api.epb-staging.digital.communities.gov.uk/'
    description: Staging Service
  - url: 'https://api.epb.digital.communities.gov.uk/'
    description: Production Service

tags:
  - name: Search
    description: Search the register given filtering data
  - name: Manage Assessors
    description: Manage assessors for a given Scheme
  - name: Manage Assessments
    description: 'Manage EPCs, DECs, RRs and ACIRs'
  - name: Manage Addresses
    description: Manage addresses in the register
  - name: Manage Schemes
    description: Operations for managing schemes in the register
  - name: Migration
    description: Endpoints used to migrate information from the legacy system
  - name: Green Deal
    description: Endpoints used by the Green Deal register integration, including Renewable Heat Initiative

paths:
  /schemes:
    get:
      tags:
        - Manage Schemes
      summary: Get a list of all energy assessment schemes in the register
      security:
        - oauth:
            - 'scheme:list'
      responses:
        '403':
          description: Forbidden
        '200':
          description: List of all schemes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schemes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Scheme'
      parameters: []
    post:
      tags:
        - Manage Schemes
      summary: Add a new energy assessment scheme to the register
      security:
        - oauth:
            - 'scheme:create'
      requestBody:
        description: The scheme to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'
      responses:
        '201':
          description: Scheme succesfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Scheme'
        '403':
          description: Forbidden
        '409':
          description: Scheme already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: SCHEME_ALREADY_EXISTS
                        title:
                          type: string
                          example: >-
                            A scheme with this name already exists in the
                            register

  '/schemes/{schemeId}/assessors':
    get:
      tags:
        - Manage Assessors
      summary: List a summary of assessors belonging to a scheme
      security:
        - oauth:
            - 'scheme:assessor:list'
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
      responses:
        '200':
          description: List of assessors for a scheme
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessors:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorBody'
        '404':
          description: Scheme not found
        '403':
          description: Forbidden

  '/schemes/{schemeId}/assessors/{schemeAssessorId}':
    get:
      tags:
        - Manage Assessors
      summary: Get all details for an individual assessor registration
      security:
        - oauth:
            - 'scheme:assessor:fetch'
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
        - in: path
          required: true
          name: schemeAssessorId
          description: The Assessor ID assigned by the scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      responses:
        '200':
          description: Assessor found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '404':
          description: Assessor not found
        '403':
          description: Forbidden
    put:
      tags:
        - Manage Assessors
      summary: >-
        Register a new assessor to associate them with your scheme,
        or update details of an assessor already on your scheme.
      security:
        - oauth:
            - 'scheme:assessor:update'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
        '403':
          description: Forbidden
        '409':
          description: Assessor already exists on a different scheme

  /assessors:
    get:
      tags:
        - Search
        - Manage Assessors
      summary: Search for an assessor by postcode or name
      security:
        - oauth:
            - 'assessor:search'
      parameters:
        - in: query
          name: postcode
          description: A postcode to search from for an assessor
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: name
          description: The name of the assessor
          schema:
            $ref: '#/components/schemas/AssessorFullName'
        - in: query
          name: qualification
          description: Only show assessors who have this qualification
          schema:
            $ref: '#/components/schemas/AssessorQualificationSearchOptions'
      responses:
        '200':
          description: List of assessors matching the search criteria
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssessorSearchResults'
                  - $ref: '#/components/schemas/AssessorSearchByPostcodeResults'
        '400':
          description: Invalid query
        '403':
          description: Forbidden

  /search/addresses:
    get:
      tags:
        - Search
        - Manage Addresses
      summary: Search for an address by type and either a postcode or street and town
      security:
        - oauth:
            - 'search:addresses'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: street
          description: The street of the address being searched for
          schema:
            type: string
        - in: query
          name: town
          description: The city or town of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressTown'
        - in: query
          name: addressType
          description: Domestic or commercial address
          schema:
            type: string
            enum:
              - DOMESTIC
              - COMMERCIAL
      responses:
        '403':
          description: Forbidden
        '200':
          description: Address search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressSearchResults'

  '/assessments/{assessmentId}':
    get:
      tags:
        - Manage Assessments
      summary: Get an Energy Performance Assessment
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '403':
          description: Forbidden
        '404':
          description: Assessment not found
        '500':
          description: Server error

  '/assessments/{assessmentType}/{assessmentId}':
    post:
      tags:
        - Manage Assessments
      summary: Lodge a new assessment
      security:
        - oauth:
            - 'assessment:lodge'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being added, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
        - in: path
          name: assessmentType
          required: true
          description: 'The type of the assessment being added'
          schema:
            $ref: '#/components/schemas/AssessmentType'
      requestBody:
        content:
          application/xml+RdSAP-Schema-19.0:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '201':
          description: New assessment lodged
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '400':
          description: Bad request
        '409':
          description: Assessment with that assessmentId already exists
        '403':
          description: Forbidden
        '500':
          description: Server error

  /reports/assessors/status:
    get:
      tags:
        - Manage Assessors
        - Reports
      summary: >-
        Report of assessors who were suspended and struck off on a particular
        day
      security:
        - oauth:
            - 'report:assessor:status'
      parameters:
        - in: query
          name: reportDate
          required: true
          description: The date of the report
          schema:
            type: string
            format: date
            example: '2020-01-30'
      responses:
        '200':
          description: Report returned succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessorStatusEvents:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorQualificationChangeEvent'
        '404':
          description: 'Report not found, likely because the date is in the future'
        '403':
          description: Forbidden

  '/migrations/assessors/{schemeAssessorId}':
    put:
      tags:
        - Migration
      summary: Migrate an assessor from the legacy database
      security:
        - oauth:
            - 'migrate:assessor'
      parameters:
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
        '403':
          description: Forbidden
        '409':
          description: Assessor already exists on a different scheme

  '/migrations/assessments/{assessmentId}':
    put:
      tags:
        - Migration
      summary: Migrate an existing Energy Performance Assessment to the register
      security:
        - oauth:
            - 'migrate:assessment'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: The ID of the assessment being added
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '200':
          description: Assessment added / replaced
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '201':
          description: New assessment succesfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Server error

  '/migrations/addresses/{addressId}':
    put:
      tags:
        - Migration
      summary: Migrate an address from AddressBase or another source of addresses
      security:
        - oauth:
            - 'migrate:address'
      parameters:
        - in: path
          name: addressId
          required: true
          description: The unique identifier of the address being added
          schema:
            $ref: '#/components/schemas/AddressId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBody'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBody'
        '201':
          description: Address added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBody'
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Server error

  '/greendeal/assessments/{assessmentId}':
    get:
      tags:
        - Green Deal
        summary: 'Get the Green Deal details from the assessment with reference
                  {assessmentId}'
      security:
        - oauth:
            - 'greendeal:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Green Deal Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessmentGreenDealDetails'
        '403':
          description: Forbidden
        '404':
          description: Assessment not found
        '500':
          description: Server error

  '/greendeal/rhi/assessments/{assessmentId}/latest':
    get:
      tags:
        - Green Deal
      summary: 'Get the RHI details of the most recent Energy Performance
                Assessment for the address of the assessment with reference
                {assessmentId}'
      security:
        - oauth:
            - 'greendeal:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: RHI Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessmentRHIDetails'
        '403':
          description: Forbidden
        '404':
          description: Assessment not found
        '500':
          description: Server error

  '/greendeal/disclosure/plans/{assessmentId}':
    post:
      tags:
        - Green Deal
      summary: 'Disclose new live Green Deal plan to appear on EPC with RRN
                {assessmentId}'
      security:
        - oauth:
            - 'greendeal:disclosure:update'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        '201':
          description: Green Deal disclosure successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        '400':
          description: Problem with Green Deal record
        '403':
          description: Forbidden

components:
  securitySchemes:
    oauth:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      flows:
        clientCredentials:
          tokenUrl: /auth/oauth/token
          scopes:
            'scheme:create': Create a new scheme on the register
            'scheme:list': List schemes on the register
            'scheme:assessor:list': List assessors
            'scheme:assessor:update': Add or Update assessors
            'scheme:assessor:fetch': Get full details of an individual assessor
            'assessment:fetch': Get full details of an individual assessment
            'assessment:lodge': Lodge a new assessment with the register
            'assessment:search': Search the register for an assessment
            'assessor:search': Search the register for an assessor
            'address:search': List addresses that match a given search criteria, along with existing assessments
            'migrate:assessment': Migrate an assessment to the register
            'migrate:assessor': Migrate an assessor to the register
            'migrate:address': Migrate an address to the register
            'report:assessor:status': Get a report of changes to assessors status for a given date
            'greendeal:assessment:fetch': Get limited details (RHI required fields) of an individual assessment
            'greendeal:disclosure:update': Submit or update details of a Green Deal Plan

  schemas:
    ## Addresses
    Address:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/AddressSource'
        line1:
          $ref: '#/components/schemas/AddressLine1'
        line2:
          type: string
          example: ''
        line3:
          type: string
          example: ''
        line4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    AddressBody:
      $ref: '#/components/schemas/Address'

    AddressDetail:
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            existingAssessments:
              type: array
              items:
                type: object
                properties:
                  assessmentId:
                    $ref: '#/components/schemas/AssessmentId'
                  assessmentType:
                    $ref: '#/components/schemas/AssessmentType'

    AddressId:
      type: string
      example: 'UPRN-716375734512'

    AddressLine1:
      type: string
      example: 2 Marsham Street

    AddressTown:
      type: string
      example: London

    AddressPostcode:
      type: string
      example: SW1P 4JA

    AddressSource:
      type: string
      enum:
        - GAZETTEER
        - PREVIOUS_CERTIFICATE
      example: GAZETTEER

    AddressSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/AddressDetail'

    # Assessors
    Assessor:
      type: object
      properties:
        firstName:
          type: string
          example: Jo
        lastName:
          type: string
          example: Bloggs
        middleNames:
          type: string
          example: T
        contactDetails:
          type: object
          properties:
            telephoneNumber:
              type: string
              maxLength: 256
              example: 01632 960375
            email:
              type: string
              format: email
              example: j.t.bloggs@example.com
        qualifications:
          $ref: '#/components/schemas/AssessorQualifications'

    AssessorBody:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              example: '1980-01-10'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'

    AssessorDetail:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            assessorSchemeId:
              $ref: '#/components/schemas/AssessorSchemeId'
            registeredBy:
              $ref: '#/components/schemas/Scheme'

    AssessorSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            assessors:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/AssessorDetail'

    AssessorSearchByPostcodeResults:
      allOf:
        - $ref: '#/components/schemas/AssessorSearchResults'
        - type: object
          properties:
            data:
              type: object
              properties:
                assessors:
                  type: array
                  items:
                    type: object
                    properties:
                      distanceFromPostcodeInMiles:
                        type: number
                        example: 0.2

    AssessorSchemeId:
      type: string
      example: TEST000001

    AssessorQualifications:
      type: object
      properties:
        domesticRdSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        domesticSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticDec:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos5:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticSp3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticCc4:
          $ref: '#/components/schemas/AssessorQualificationStatus'

    AssessorQualificationSearchOptions:
      type: string
      enum:
        - domesticRdSap
        - domesticSap
        - nonDomesticDec
        - nonDomesticNos3
        - nonDomesticNos4
        - nonDomesticNos5
        - nonDomesticSp3
        - nonDomesticCc4

    AssessorQualificationStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - STRUCKOFF
        - SUSPENDED
      example: ACTIVE

    AssessorQualificationChangeEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/AssessorDetail'
      properties:
        qualificationChange:
          type: object
          properties:
            qualificationType:
              type: string
              example: domesticEnergyPerformanceCertificates
            previousStatus:
              $ref: '#/components/schemas/AssessorQualificationStatus'
            newStatus:
              allOf:
                - $ref: '#/components/schemas/AssessorQualificationStatus'
                - example: 'STRUCKOFF'

    AssessorFullName:
      type: string
      example: Jo Bloggs

    # Assessments
    AssessmentId:
      type: string
      example: 0000-0000-0000-0000-0000

    AssessmentType:
      type: string
      example: domestic-epc
      enum:
        - domestic-epc
        - non-domestic-epc
        - recommendation-report
        - dec
        - dec-recommendation-report
        - ac-report
        - ac-cert

    # Green Deal
    AssessmentGreenDealDetails:
      type: object
      properties:
        Address:
          $ref: '#/components/schemas/Address'
        CountryCode:
          type: string
          example: 'EAW'
        InspectionDate:
          type: string
          format: date
          example: '2020-02-29'
        LodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        MainFuelType:
          type: string
          example: 'Natural Gas'
        SecondaryFuelType:
          type: string
          example: 'Grid Supplied Electricity'
        WaterHeatingFuel:
          type: string
          example: 'Smokeless Fuel (inc Coke)'

    AssessmentRHIDetails:
      type: object
      properties:
        EPCRrn:
          $ref: '#/components/schemas/AssessmentId'
        AssessorName:
          $ref: '#/components/schemas/AssessorFullName'
        ReportType:
          type: string
          example: 'Energy Performance Certificate'
        InspectionDate:
          type: string
          format: date
          example: '2020-01-30'
        LodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        DwellingType:
          type: string
          example: 'Top-floor flat'
        Postcode:
          $ref: '#/components/schemas/AddressPostcode'
        PropertyAgeBand:
          type: string
          example: 'D'
        Tenure:
          type: string
          example: 'Owner-occupied'
        TotalFloorArea:
          type: number
          example: 123.5
        SecondaryHeating:
          $ref: '#/components/schemas/PropertyFeatureSummary'
        SpaceHeating:
          type: number
          example: 25
        WaterHeating:
          type: number
          example: 30
        EnergyEfficiency:
          type: number
          example: 3
        CurrentRating:
          type: number
          example: 64
        CurrentBand:
          type: string
          example: D
        PotentialRating:
          type: number
          example: 75
        PotentialBand:
          type: string
          example: C
        CavityWallInsulationRecommendation:
          type: string
          example: 'Cavity wall insulation'
        LoftInsulationRecommendation:
          type: string
          example: 'Increase loft insulation to 270 mm'

    PropertyFeatureSummary:
      type: object
      properties:
        Description:
          type:string
        EnergyEfficiencyRating:
          type: string
        EnvironmentalEfficiencyRating:
          type: string

    GreenDealPlan:
      type: object
      properties:
        Identifier:
          type: string
          maxLength: 12
          example: ABC123456DEF
      StartDate:
        type: string
        format: date
        example: '2020-01-30'
      EndDate:
        type: string
        format: date
        example: '2030-02-28'
      ProviderDetails:
        $ref: '#/components/schemas/GreenDealProvider'
      Interest:
        $ref: '#/components/schemas/GreenDealInterest'
      ChargeUplift:
        $ref: '#/components/schemas/GreenDealChargeUplift'
      CCARegulated:
        type: boolean
        example: true
      StructureChanged:
        type: boolean
        example: false
      Measures:
        type: array
        items:
          $ref: '#/components/schemas/GreenDealMeasure'
      Charges:
        type: array
        items:
          $ref: '#/components/schemas/GreenDealCharge'

    GreenDealProvider:
      type: object
      properties:
        Name:
          type: string
          example: 'The Bank'
        Telephone:
          type: string
          example: '0800 0000000'
        Email:
          type: string
          example: 'lender@example.com'

    GreenDealInterest:
      type: object
      properties:
        Rate:
          type: number
          example: 12.3
        Fixed:
          type: boolean
          example: true

    GreenDealChargeUplift:
      type: object
      properties:
        Amount:
          type: number
          example: 12.3
        Date:
          type: string
          format: date
          example: '2025-03-29'

    GreenDealMeasure:
      type: object
      properties:
        MeasureType:
          type: string
          example: 'Loft insulation'
        Product:
          type: string
          example: 'WarmHome lagging stuff (TM)'
        RepaidDate:
          type: string
          format: date
          example: '2025-03-29'

    GreenDealCharge:
      type: object
      properties:
        StartDate:
          type: string
          format: date
          example: '2020-03-29'
        EndDate:
          type: string
          format: date
          example: '2030-03-29'
        DailyCharge:
          type: number
          example: '0.34'

    # Schemes
    Scheme:
      allOf:
        - $ref: '#/components/schemas/SchemeBody'
        - type: object
          properties:
            schemeId:
              type: string
              example: 432

    SchemeBody:
      type: object
      properties:
        name:
          type: string
          example: EPCs 4 U

    Empty:
      type: object

  links: {}
  callbacks: {}
security: []
