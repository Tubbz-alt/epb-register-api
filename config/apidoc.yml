openapi: "3.0.0"
info:
  title: Energy Performance of Buildings Register API
  description: API for all EPBR services (EPC, DEC, ACIR), maintained by the EPBR Service Team at MHCLG.
  version: "1.0"

servers:
  - url: https://mhclg-epb-assessor-api-integration.london.cloudapps.digital/api
    description: Integration server
    variables:
      authServer:
        default: https://mhclg-epb-auth-server-integration.london.cloudapps.digital
  - url: https://mhclg-epb-assessor-api-staging.london.cloudapps.digital/api
    description: Staging server
    variables:
      authServer:
        default: https://mhclg-epb-auth-server-staging.london.cloudapps.digital

tags:
  - name: Manage schemes
    description: Operations for managing schemes in the register
  - name: Individually manage assessors
    description: Managing assessors in a RESTful web services paradigm
  - name: Certificates
    description: Manage EPCs

paths:
  /schemes:
    get:
      tags:
        - Manage schemes
      summary: Get a list of all energy assessment schemes in the register
      security:
        - oauth: []
      responses:
        200:
          description: List of all schemes
          content:
            application/json:
              schema:
                type: object
                properties:
                  schemes:
                    type: array
                    items:
                      $ref: '#/components/schemas/SchemeSummary'

    post:
      tags:
        - Manage schemes
      summary: Add a new energy assessment scheme to the register
      security:
        - oauth: []
      requestBody:
        description: The scheme to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "EPCs 4 U"
      responses:
        201:
          description: Scheme succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemeSummary'

        400:
          description: Scheme already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: "SCHEME_ALREADY_EXISTS"
                        title:
                          type: string
                          example: "A scheme with this name already exists in the register"

  /schemes/{schemeId}/assessors/{schemeAssessorId}:
    get:
      tags:
        - Individually manage assessors
      summary: Get all details for an individual assessor registration
      security:
        - oauth: []
      parameters:
        - in: path
          required: true
          name: schemeId
          description: ID of the scheme
          schema:
            type: integer
        - in: path
          required: true
          name: schemeAssessorId
          description: The Assessor ID assigned by the scheme
          schema:
            type: string
          example: "STER514421/02"
      responses:
        404:
          description: Assessor not found
        200:
          description: Assessor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortAssessorSummary'

    put:
      tags:
        - Individually manage assessors
      summary: Register a new assessor to associate them with your scheme
      security:
        - oauth: []
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: Assessor ID assigned by the registering scheme
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                middleNames:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                contactDetails:
                  type: object
                  properties:
                    telephoneNumber:
                      type: string
                      maxLength: 256
                    email:
                      type: string
                      format: email
      responses:
        201:
          description: Assessor succesfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortAssessorSummary'

        200:
          description: Existing assessor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortAssessorSummary'

        400:
          description: Problem with assessor registration record
        409:
          description: Assessor already exists on a different scheme
        422:
          description: Assessor does not pass validation

  /certificates/epc/domestic/{certificateId}:
    get:
      tags:
        - Certificates
      summary: Get a domestic EPC
      security:
        - oauth: []
      parameters:
        - in: path
          name: certificateId
          required: true
          description: The ID of the certificate being requested
          schema:
            type: string
            example: "145fv-1644-njs11"
      responses:
        200:
          description: EPC Certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomesticEPC'
        404:
          description: Certificate not found
        500:
          description: Server error
    put:
      tags:
        - Certificates
      summary: Migrate an existing EPC to the register
      security:
        - oauth: []
      parameters:
        - in: path
          name: certificateId
          required: true
          description: The ID of the certificate being added
          schema:
            type: string
            example: "145fv-1644-njs11"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrateEPC'
      responses:
        200:
          description: Certificate added / replaced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomesticEPC'
        400:
          description: Bad request
        500:
          description: Server error


components:
  securitySchemes:
    oauth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "{authServer}"

  schemas:
    SchemeSummary:
      type: object
      properties:
        schemeId:
          type: string
          example: "432"
        name:
          type: string
          example: "EPBs 4 U"
    ShortAssessorSummary:
      type: object
      properties:
        registeredBy:
          $ref: '#/components/schemas/SchemeSummary'
        schemeAssessorId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleNames:
          type: string
        dateOfBirth:
          type: string
          format: date
        contactDetails:
          type: object
          properties:
            telephoneNumber:
              type: string
              maxLength: 256
            email:
              type: string
              format: email
    DomesticEPC:
      allOf:
        - $ref: '#/components/schemas/EPCBasicInfo'
        - type: object
          properties:
            certificateId:
              type: string
              example: "154d-616-nn177"

    EPCBasicInfo:
      type: object
      properties:
        dateOfAssessment:
          type: string
          format: date
          description: The date that the assessor carried out the assessment of the property
        dateOfCertificate:
          type: string
          format: date
          description: The date that the certificate was produced
        totalFloorArea:
          type: string
        typeOfAssessment:
          type: string
        dwellingType:
          type: string
        addressSummary:
          type: string
          example: "2 Marsham Street, London, SW1P 4JA"

    MigrateEPC:
      allOf:
        - $ref: '#/components/schemas/EPCBasicInfo'
